// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var apiHelperModel = ApiHelperModel.FromJson(jsonString);

namespace CoreBot.APIHelperModels
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ApiHelperModel
    {
        [JsonProperty("attributes")]
        public Attributes Attributes { get; set; }

        [JsonProperty("Id")]
        public string Id { get; set; }

        [JsonProperty("IsDeleted")]
        public bool IsDeleted { get; set; }

        [JsonProperty("MasterRecordId")]
        public object MasterRecordId { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("ParentId")]
        public object ParentId { get; set; }

        [JsonProperty("BillingStreet")]
        public string BillingStreet { get; set; }

        [JsonProperty("BillingCity")]
        public string BillingCity { get; set; }

        [JsonProperty("BillingState")]
        public string BillingState { get; set; }

        [JsonProperty("BillingPostalCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long BillingPostalCode { get; set; }

        [JsonProperty("BillingCountry")]
        public string BillingCountry { get; set; }

        [JsonProperty("BillingLatitude")]
        public object BillingLatitude { get; set; }

        [JsonProperty("BillingLongitude")]
        public object BillingLongitude { get; set; }

        [JsonProperty("BillingGeocodeAccuracy")]
        public object BillingGeocodeAccuracy { get; set; }

        [JsonProperty("BillingAddress")]
        public IngAddress BillingAddress { get; set; }

        [JsonProperty("ShippingStreet")]
        public string ShippingStreet { get; set; }

        [JsonProperty("ShippingCity")]
        public string ShippingCity { get; set; }

        [JsonProperty("ShippingState")]
        public string ShippingState { get; set; }

        [JsonProperty("ShippingPostalCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ShippingPostalCode { get; set; }

        [JsonProperty("ShippingCountry")]
        public string ShippingCountry { get; set; }

        [JsonProperty("ShippingLatitude")]
        public object ShippingLatitude { get; set; }

        [JsonProperty("ShippingLongitude")]
        public object ShippingLongitude { get; set; }

        [JsonProperty("ShippingGeocodeAccuracy")]
        public object ShippingGeocodeAccuracy { get; set; }

        [JsonProperty("ShippingAddress")]
        public IngAddress ShippingAddress { get; set; }

        [JsonProperty("Phone")]
        public string Phone { get; set; }

        [JsonProperty("Fax")]
        public object Fax { get; set; }

        [JsonProperty("AccountNumber")]
        public string AccountNumber { get; set; }

        [JsonProperty("Website")]
        public string Website { get; set; }

        [JsonProperty("PhotoUrl")]
        public string PhotoUrl { get; set; }

        [JsonProperty("Sic")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Sic { get; set; }

        [JsonProperty("Industry")]
        public string Industry { get; set; }

        [JsonProperty("AnnualRevenue")]
        public long AnnualRevenue { get; set; }

        [JsonProperty("NumberOfEmployees")]
        public long NumberOfEmployees { get; set; }

        [JsonProperty("Ownership")]
        public string Ownership { get; set; }

        [JsonProperty("TickerSymbol")]
        public string TickerSymbol { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("Rating")]
        public string Rating { get; set; }

        [JsonProperty("Site")]
        public string Site { get; set; }

        [JsonProperty("OwnerId")]
        public string OwnerId { get; set; }

        [JsonProperty("CreatedDate")]
        public string CreatedDate { get; set; }

        [JsonProperty("CreatedById")]
        public string CreatedById { get; set; }

        [JsonProperty("LastModifiedDate")]
        public string LastModifiedDate { get; set; }

        [JsonProperty("LastModifiedById")]
        public string LastModifiedById { get; set; }

        [JsonProperty("SystemModstamp")]
        public string SystemModstamp { get; set; }

        [JsonProperty("LastActivityDate")]
        public object LastActivityDate { get; set; }

        [JsonProperty("LastViewedDate")]
        public string LastViewedDate { get; set; }

        [JsonProperty("LastReferencedDate")]
        public string LastReferencedDate { get; set; }

        [JsonProperty("Jigsaw")]
        public object Jigsaw { get; set; }

        [JsonProperty("JigsawCompanyId")]
        public object JigsawCompanyId { get; set; }

        [JsonProperty("CleanStatus")]
        public string CleanStatus { get; set; }

        [JsonProperty("AccountSource")]
        public object AccountSource { get; set; }

        [JsonProperty("DunsNumber")]
        public object DunsNumber { get; set; }

        [JsonProperty("Tradestyle")]
        public object Tradestyle { get; set; }

        [JsonProperty("NaicsCode")]
        public object NaicsCode { get; set; }

        [JsonProperty("NaicsDesc")]
        public object NaicsDesc { get; set; }

        [JsonProperty("YearStarted")]
        public object YearStarted { get; set; }

        [JsonProperty("SicDesc")]
        public object SicDesc { get; set; }

        [JsonProperty("DandbCompanyId")]
        public object DandbCompanyId { get; set; }

        [JsonProperty("CustomerPriority__c")]
        public string CustomerPriorityC { get; set; }

        [JsonProperty("SLA__c")]
        public string SlaC { get; set; }

        [JsonProperty("Active__c")]
        public string ActiveC { get; set; }

        [JsonProperty("NumberofLocations__c")]
        public long NumberofLocationsC { get; set; }

        [JsonProperty("UpsellOpportunity__c")]
        public string UpsellOpportunityC { get; set; }

        [JsonProperty("SLASerialNumber__c")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SlaSerialNumberC { get; set; }

        [JsonProperty("SLAExpirationDate__c")]
        public DateTimeOffset SlaExpirationDateC { get; set; }
    }

    public partial class Attributes
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }
    }

    public partial class IngAddress
    {
        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("geocodeAccuracy")]
        public object GeocodeAccuracy { get; set; }

        [JsonProperty("latitude")]
        public object Latitude { get; set; }

        [JsonProperty("longitude")]
        public object Longitude { get; set; }

        [JsonProperty("postalCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PostalCode { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("street")]
        public string Street { get; set; }
    }

    public partial class ApiHelperModel
    {
        public static ApiHelperModel FromJson(string json) => JsonConvert.DeserializeObject<ApiHelperModel>(json, CoreBot.APIHelperModels.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ApiHelperModel self) => JsonConvert.SerializeObject(self, CoreBot.APIHelperModels.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
